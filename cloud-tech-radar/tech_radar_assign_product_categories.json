import json
import shutil
from fuzzywuzzy import fuzz

# Load product definitions
with open('product_definitions.json', 'r') as f:
    product_definitions = json.load(f)

# Backup the original product_definitions.json
shutil.copy('product_definitions.json', 'product_definitions_backup.json')

# Define the categories and keywords
categories = {
    "Data / ML": ["big data", "data warehouse", "data processing", "machine learning", "artificial", "intelligence", "analytics", "machine learning", "flows", "batch processing", "natural language", "models", "neural", "data analytics", "business intelligence"],
    "Storage": ["storage", "backup", "objects", "files", "database", "relational database", "NoSQL database", "datastore", "persistent", "volumes", "redundancy", "filesystem", "object storage"],
    "Compute": ["compute", "stateless", "container", "k8s", "kubernetes", "vm instances", "virtual", "machine", "run", "pod", "clusters", "functions", "sql queries", "nodes", "cpu and memory", "serverless"],
    "Build / CI": ["release", "artefact", "build", "artifact", "ci/cd", "deployment", "deploy", "integration", "continuous integration", "repository", "vulnerability", "source code", "code", "docker", "registry", "java", "infrastructure as code", "build automation"],
    "Observability": ["time series", "instrumentation", "alert", "dashboard", "metrics", "monitoring", "logs", "traces", "alerting", "observability", "metrics collection", "prometheus", "visualization", "metric storage", "log storage", "alert rules"]
}

def filter_low_fuzzy_matches(val):
    threshold = 80
    if val < threshold:
        return 0
    else:
        return val 

def categorize_product(product):
    name = product["name"]
    description = product["description"]
    use_cases = " ".join(product["example_use_cases"])
    
    scores = {category: 0 for category in categories}
    
    for category, keywords in categories.items():
        for kw in keywords:
            keyword = kw.lower().strip()
            scores[category] += filter_low_fuzzy_matches(fuzz.partial_ratio(keyword, name.lower()))
            scores[category] += filter_low_fuzzy_matches(fuzz.partial_ratio(keyword, description.lower()))
            scores[category] += filter_low_fuzzy_matches(fuzz.partial_ratio(keyword, str(product["keywords"]).lower()))
            scores[category] += filter_low_fuzzy_matches(fuzz.partial_ratio(keyword, use_cases.lower()))
    
    return max(scores, key=scores.get)

# Assign categories
for product_key in product_definitions:
    product = product_definitions[product_key]
    category = categorize_product(product)
    product_definitions[product_key]['category'] = category

# Output the updated product definitions as JSON
output_json_path = 'product_definitions.json'
with open(output_json_path, 'w') as f:
    json.dump(product_definitions, f, indent=4)

print(f"Output JSON saved to {output_json_path}")

